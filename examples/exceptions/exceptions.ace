func safe_div(number1: int, number2: int) {
    if(number2 == 0) {
        throw "Division by zero"
    }
    return number1 / number2
}

# program will not crash, but terminate with an error
safe_div(10, 0)


# if anything throws an exception, the program jumps to the catch block
try {
    const result = safe_div(10, 0)
    printf('Result %d\n', $result)
}
catch {
    printf('Error: Division by zero\n', 0)
}

# you can make a wrapper to always return a value
func divWithoutError(number1: int, number2: int) {
    try {
        return safe_div(number1, number2)
    }
    catch {
        return -1
    }
}
const isAlwaysANumber: int = divWithoutError(10, 0)